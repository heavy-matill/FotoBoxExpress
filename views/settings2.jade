extends layout

block content
    script(src="/socket.io/socket.io.js")
    script.
        //var socket = io.connect('http://localhost:8000');		
        var socket = io.connect(window.location.search.split("/")[0]);
        function saveSettings2(){
            var nodes = document.querySelectorAll(":input[type=text]:not([readonly])");
            for (var i=0; i<nodes.length; i++)
                console.log(nodes[i].value)
        }
        function saveSettings(){
            var strUnique = (document.getElementById("Event-Date").value + "_" + document.getElementById("Event-Name").value).replace(/[^a-zA-Z0-9\-]+/g,"_");

            socket.emit("saveSettings", {
                "Event": {
                    "Name": document.getElementById("Event-Name").value,
                    "Date": document.getElementById("Event-Date").value
                    },
                "FotoBox": {
                    "tOutStartSlideShow": document.getElementById("FotoBox-tOutStartSlideShow").value,
                    "tOutNextSlide": document.getElementById("FotoBox-tOutNextSlide").value
                    "tTriggerDelay": document.getElementById("FotoBox-tTriggerDelay").value
                    },
                "Camera": {
                    "IP": document.getElementById("Camera-IP").value
                    },
                "Printer": {
                    "bEnable": document.getElementById("Printer-bEnable").checked,
                    "grayscaleOptions": document.getElementById("Printer-grayscaleOptions").value
                    },
                "Mongo": {
                    "Server": document.getElementById("Mongo-Server").value,
                    "Port": document.getElementById("Mongo-Port").value,
                    "DB": document.getElementById("Mongo-DB").value,
                    "Collection": strUnique,
                    "URL": "mongodb://" + document.getElementById("Mongo-Server").value + ":" + document.getElementById("Mongo-Port").value + "/" + document.getElementById("Mongo-DB").value
                    },
                "Paths": {
                    "localFotos": "public/fotos/" + strUnique,
                    "localThumbnails": "public/thumbnails/" + strUnique,
                    "publicFotos": "fotos/" + strUnique,
                    "publicThumbnails": "thumbnails/" + strUnique,
                    "strUnique": strUnique
                    }
                }
            );            
        }
    link(rel='stylesheet', href='/stylesheets/settings.css')
    h1 Settings
    table
        tr
            td
                h2 Event
        tr
            td Name
            td
                input(id="Event:Name" type="text" value="#{settings.Event.Name}")
        tr
            td Date
            td
                input(id="Event:Date" type="text" value="#{settings.Event.Date}")

        tr
            td
                h2 FotoBox
        tr
            td Resume slide show delay
            td
                input(id="FotoBox:tOutStartSlideShow" type="text" value="#{settings.FotoBox.tOutStartSlideShow}")
        tr
            td Next slide delay
            td
                input(id="FotoBox:tOutNextSlide" type="text" value="#{settings.FotoBox.tOutNextSlide}")

        tr
            td Delay to trigger camera
            td
                input(id="FotoBox:tTriggerDelay" type="text" value="#{settings.FotoBox.tTriggerDelay}")

        tr
            td
                h2 Camera
        tr
            td Camera IP
            td
                input(id="Camera:IP" type="text" value="#{settings.Camera.IP}")

        tr
            td
                h2 Printer
        tr
            td Enable printing
            td
                input(id="Printer:bEnable" type="text" value="#{settings.Printer.bEnable}" hidden)
                -if(settings.Printer.bEnable)
                    input(id="cbPrinterEnable" type="checkbox" checked)
                -else
                    input(id="cbPrinterEnable" type="checkbox")
        tr
            td
                h2 MongoDB
        tr
            td Server
            td
                input(id="Mongo:Server" type="text" value="#{settings.Mongo.Server}")
        tr
            td Port
            td
                input(id="Mongo:Port" type="text" value="#{settings.Mongo.Port}")
        tr
            td Database
            td
                input(id="Mongo:DB" type="text" value="#{settings.Mongo.DB}")
        tr
            td Collection
            td
                input(id="Mongo:Collection" type="text" value="#{settings.Mongo.Collection}" readonly)

        tr
            td
                h2 Paths
        tr
            td Fotos local
            td
                input(type="text" value="#{settings.Paths.localFotos}" readonly)
        tr
            td Fotos public
            td
                input(type="text" value="#{settings.Paths.publicFotos}" readonly)
        tr
            td Thumbnails local
            td
                input(type="text" value="#{settings.Paths.localThumbnails}" readonly)
        tr
            td Thumbnails public
            td
                input(type="text" value="#{settings.Paths.publicThumbnails}" readonly)


        tr
            td
            td
                input(type="button" value="Reset" onclick="location.reload();")
                input(type="button" value="Save" onclick="saveSettings();location.reload();")
                input(type="button" value="Shutdown" onclick="socket.emit('shutdown',prompt('Enter password to shutdown:'));")
                input(type="button" value="Kill Process" onclick="socket.emit('kill',prompt('Enter password to kill nodejs:'));")
                input(type="button" value="Update" onclick="socket.emit('update',prompt('Enter password to pull update from git:'));")

    textarea#log
    script(src="/socket.io/socket.io.js")
    script.
        var socket = io();  
        socket.on('message', function(data){document.getElementById("log").append(data+"\r\n")});