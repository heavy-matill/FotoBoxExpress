#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('../config');
config.argv().env().file({ file: 'config.json' });
var app = require('../app');
var debug = require('debug')('fotoboxexpress:server');
var http = require('http');
var settingsController = require('../controllers/settingsController');
var printerController = require('../controllers/printerController');
var dbController = require('../controllers/dbController');
// Run scripts in shell
const shellExec = require('shell-exec')

const { spawn } = require('child_process');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

server = http.createServer(app);

/**
 * Socket.io 
 * https://stackoverflow.com/questions/24609991/using-socket-io-in-express-4-and-express-generators-bin-www
 */

var socketApi = require('../socketApi');
var io = socketApi.io;
io.attach(server);
io.on('connection', function(client) {

    function log(data) {
        console.log(data);
        client.emit('message', data);
    }
    console.log('Client connected...');
    client.on('join', function(data) {
        log(data);
    });
    client.on('requestDislike', function(data) {
        dbController.dislike(data.fileName, data.sessionId)
    });
    client.on('requestLike', function(data) {
        dbController.like(data.fileName, data.sessionId)
    });
    client.on('saveSettings', function(data) {
        log(data);
        settingsController.saveSettings(data)
            //config.argv().env().file({ file: 'config.json' });
    });
    client.on('shutdown', function(data) {
        if (data == "Secret") {
            log("Shutdown initiated.");
            shellExec('sudo halt -p').then(value => log(value.stdout + value.stderr));
        }
    });
    client.on('reboot', function(data) {
        if (data == "Secret") {
            log("Reboot initiated.");
            shellExec('sudo reboot').then(value => log(value.stdout + value.stderr));
        }
    });
    client.on('kill', function(data) {
        if (data == "Secret") {
            log("Killing process.");
            process.exit()
        }
    });
    client.on('clear-printer', function() {
        log("Clearing printer queue.");
        shellExec('sudo rm -r /var/spool/cups').then(() => {
            shellExec('sudo systemctl restart cups.service');
        });
    });
    client.on('restart', function(data) {
        if (data == "Secret") {
            const restartProcess = () => {
                log("Restarting process.");
                spawn(process.argv[1], process.argv.slice(2)).unref()
                process.exit()
            }
            restartProcess();
            //log("Killing node.");
            //shellExec('pkill -f node && npm start').then(value => log(value.stdout + value.stderr));
        }
    });
    client.on('update', function(data) {
        if (data == "Secret") {
            log("Update initiated.");
            shellExec('cd FotoBoxExpress/').then(value => log(value.stdout + value.stderr));
            shellExec('sudo git stash').then(value => log(value.stdout + value.stderr));
            shellExec('sudo git pull').then(value => log(value.stdout + value.stderr));
            shellExec('sudo npm install').then(value => log(value.stdout + value.stderr));
            shellExec('pkill -f node; npm start').then(value => log(value.stdout + value.stderr));
        }
    });
    client.on('login', function(data) {
        if (data == "Secret") {
            log("Logged in.");
            client.emit("loginValid");
        }
    });
    client.on('printImage', function(data) {
        console.log(data)
        printerController.printThumbnail(data.fileName)
    });
    client.on('storageWarning', function(data) {
        console.log('storageWarning')
        console.log(data)
        client.emit("storageWarning", data);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

exports.close = function(callback) {
    server.close(callback)
};