#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('fotoboxexpress:server');
var http = require('http');
// MongoDB connection
var db = require('monk')("mongodb://localhost:27017/FotoBox");
var fotosCollection = db.get("Fotos");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io 
 * https://stackoverflow.com/questions/24609991/using-socket-io-in-express-4-and-express-generators-bin-www
 */

var socketApi = require('../socketApi');
var io = socketApi.io;
io.attach(server);
io.on('connection', function(client) { 
  console.log('Client connected...');
  client.on('join', function(data) {
      console.log(data);
  });
  client.on('requestDislike', function(data) {
    fotosCollection.find({"name": data.imageName + ".jpg"}, function(err, docList){
      if(docList[0].likes.indexOf(data.sessionId) !== -1) {
        fotosCollection.update({"name": data.imageName + ".jpg"}, {$pull : {"likes": data.sessionId}});
      }   
    });
    //console.log(data.sessionId+" disliked "+data.imageName);
    //client.emit('dislikeConfirmed', data);
  });
  client.on('requestLike', function(data) {
    fotosCollection.find({"name": data.imageName + ".jpg"}, function(err, docList){
      if(docList[0].likes.indexOf(data.sessionId) == -1) {
        fotosCollection.update({"name": data.imageName + ".jpg"}, {$push : {"likes": data.sessionId}});
      }   
    });
    //console.log(data.sessionId+" liked "+data.imageName);
    //client.emit('likeConfirmed', data);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
